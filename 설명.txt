***********프록시 설정해주기
https://jrepository.tistory.com/59
여기 사이트보고 해주면됨


6강 Material UI를 이용하여 꾸며주기 
Material ui를 사용하기 위해 client의 customer.js에서
import { TableContainer, Table, TableHead, TableBody, TableRow, TableCell, paper } from "@mui/material";
이걸로 material import 해주기

TableRow는 사용자를 한 행으로 해주는 역할
TableCell안에 내용이 들어감
다 했으면 다시 App.js가 (메인임) 여기 들어가서 각 고객의 정보를 출력해주기
------------------------------------------------------------------------------------------------
app.js에서 사용자의 정보는 <TableBody>로 감싸주기 즉 내용이 출력되는 부분은 
tablebody로 감싸기

<TableHead>: 테이블의 속성을 나타낼 때
------------------------------------------------------------------------------------------------
다음은 CSS 설정해주기 
import './App.css' 이거는 해결법?
import {widthStyles} from '@mui/material/styles'; 이거는 영상

style 변수 정의해주는데 영상말고 이 소스 상요하기

const styles = theme =>({
  root: { //root는 밖에를 뜻하는데 
    width : '100%',
    marginTop: theme.spacing(3),
    overflowX: "auto" //x축으로 overflow 발생하게끔 함
    
  },
  table:{ // table이 무조건 1080 픽셀이상 출력되게끔 함
    minWidth:1080
    // 화면이 작아지면 가로스크롤바가 생김
  }
})


const { classes} = this.props;//를 app 안에 만들어서 위에서 정의한 styles가 적용될 수 있도록 해줌

 <Paper className={classes.root}>// 여기는 root 클래스사용
<Table className={classes.table}>// table 클래스 사용
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
7강 node js로 서버 구축
프론트 부분은 client라는 폴더로 다 옮기고
여기는 back server부분을 다룸

packkage.json에서는 client 폴더안에 react프로그램이 있으니까 그것을 client로 실행시키고 
기존 root폴더에는 서버 모듈을 실행하도록 명시함

즉 apckage.json 파일을 통해 서버와 클라이언트를 동시에 실행시키도록한다.

7강 하기전에 npm install nodemon body-parser express 이거 설치해주고 하기
------------------------------------------------------------------------------------------------

package.json 코드 설명
{
    "name":"management",
    "version":"1.0.0",
    "scripts": {
        "client":"cd client && yarn start",
        "server": "nodemon server.js",
        "dev": "concurrently --kill-others-on-fail \"yarn server\" \"yarn client\""
    }
}

"client"를 어떻게 실행할거냐는 클라이언트 폴더로 가서 -> yarn start로 client를 실행해라는 의미
"server"는  server.js파일을 실행시켜라라는 의미
즉 이렇게 하면 client와 server가 둘 다 실행됨
"dev"는 서버와 클라이언트가 둘 다 실행시킬 수 있도록 하는 코드


    "dependencies":{
        "body-parser": "^1.18.3",
        "express": "^4.16.4"
    }

body-parser, express의 버전 정의하는 듯?

------------------------------------------------------------------------------------------------
 body-parser란 node.js 모듈이다. post request data의 body로 부터 파라미터를 편리하게 추출한다.
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
8강 서버모듈에 전체 고객목록을 불러오는 api 구현
여기서는 고객 목록을 알려주는 하나의 rest api를 개발할 것이다.
서버와 클라이언트가 웹 프로토콜을 기반으로 하여 효과적으로 데이터를 주고받을 수 있도록 해줌
------------------------------------------------------------------------------------------------
package.json에서 "dev"부분에 client, server를 같이 실행되게끔 해주어서
cmd에서 "yarn dev" 치면 
서버,클라이언트가 함께 실행됨
------------------------------------------------------------------------------------------------
만약 yarn dev가 오류가 뜨면 윈도우 피시명이 한글로 되어있으면 오류가 뜸 <-영어로 바꾸기
------------------------------------------------------------------------------------------------
코드 설명

app.get('/api/customers', (req,res)=>{
    res.send([{
        'id':1,
        'image':'https://placeimg.com/64/64/any',
        'name':'홍길동',
        'birthday':'961222',
        'gender':'man',
        'job':'college student'
      }
      ]);
})

위 코드는 클라이언트가 경로에 접속하면 send를 통해 고객의 정보가 json형태로 반환됨
rest API에서는 기본적으로 json 형식으로 데이터를 주고 받음
------------------------------------------------------------------------------------------------
https://jsonlint.com/ 
여기 사이트에 들어가서 server화면에 뜬걸 복사 붙여넣기하면 정확한 json형식인지 확인가능하다.
밑에 valid JSON이라고 뜨면 정상적임
------------------------------------------------------------------------------------------------
react에서는 비동기 통신을 이용해 서버에 접근해 데이터를 가져오도록 코딩하는데
여기서는 5000번 port를 api port로 이용하기 위해 
클라이언트 package.json에 프록시 설정을 해줘야한다.
    "proxy": "http://localhost:5000" 이걸 추가해준다.
app.js에서 접근하도록 코딩 한다.
------------------------------------------------------------------------------------------------
일반적은 react client 프로그램은 웹서비스가 동작하고 나서 사용자의 요청에 따라 서버에 접근해 데이터를 불러올 수 있는데 그래서 고객 데이터는 처음에 비어 있다가 서버로부터 데이터를 받으면 그 때 데이터가 재구성된다

- props는 변경될 수 없는 데이터를 명시할 때 사용하고
- state는 component내에서 변경될 수 있는 변수를 처리하고자할 때 사용할 수 있다.
------------------------------------------------------------------------------------------------
코드 설명
  state = {
    customers:""
  }
데이터가 변경될 수 있기 때문에 state로 customers 변수를 명시해준다.

- react의 component는 라이브러리로 생명주기가 가능하다. 
- ComponentDidMount는 모든 컴포넌트가 실제로 마운트가 완료되면 실행되는 부분

  ComponentDidMount(){ //api서버에 접근을 해서 데이터를 받아오는 작업을 이 안에서 가능함
//ComponentDidMount는 모든 컴포넌트가 실제로 마운트가 완료되면 실행됨
    this.callApi()
    .then(res=> this.setState({customers:res}));
  }


  const callApi = async () => { //비동기적으로 수행가능하게함
    const response = await fetch('/api/customers');// 접속하고자 하는 api 주소 넣기
    const body = await response.json();
    console.log(body);    //TODO: 콘솔 찍어보셈
    return body;
  };
즉 react 앱에서 const response = await fetch('/api/customers'); 이 경로에 접속을해 거기 있는 내용을 가지고와서 json형태로 body변수에 저장하겠다는 뜻임

즉 
this.callAPI()를 통해 비동기 함수를 호출하고
거기서 body에 저장된 json을 return하는 것을 
allapi를 통해 불러오면
then함수를 통해 body-> res라고 변수명이 바뀌게 된다.
res를 customers라는 변수에 넣어준다는 의미이다.


------------------------------------------------------------------------------------------------
코드2
this.state.customers ? this.state.customers.map(c=>{
                //c는 그냥 int i같은 변수명인듯?
                return (<Customer
                  key={c.id} // map을 사용하면 key를 사용해 각 원소를 구별가능한 key를 설정해야한다. 무조건
                  id={c.id}
                  image={c.image}
                  name={c.name}
                  birthday={c.birthday}
                  gender={c.gender}
                  job={c.job}
                  />
                );
              }) : ""
이부분에서 this.state.customers ? this.state.customers는 
비동기적으로 데이터를 가지고 온다.
즉 react component가 처음에 구성되면 customers=""로 비어있다. 그래서 map 함수를 불러올 수 없음
api에서 데이터를 받아오면 state값을 .then(setState)를 통해 갱신해줌
그래서 this.state.customers의 값이 존재하는 경우 안에 내용물을 출력하고
없으면 : "" 아무것도 출력하지 않는다.

-----------------------------------------------------------------------------------------------
https://leftday.tistory.com/40
이 사이트는 모바일과 pc 보여주는 방법

------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
9강- react의 라이프 사이클 이해 및 API 로딩 처리 구현하기
소프트웨어에서 프로그래스바를 구현해서 api 로딩 메세지를 웹 상에 표시할 수 있다.

프로그래스바 ui는 material ui로 구현이 되어있어서 이걸 사용
프로그래스바 사이트
https://mui.com/material-ui/react-progress/
------------------------------------------------------------------------------------------------
React의 component 라이프 사이클에 대해서
리액트 라이브러리가 실행되면
1. constructor() 
2. componentwillmount()
3. render() 실제 화면에 그려짐
4. componentdidmount() 
이 순서로 실행된다.

props or state가 변경되는 경우에는
shouldComponentUpdate() 함수 등이 사용된다.
그래서 다시 3번 render함수를 불러와서 갱신된다.

- 일반적으로 API를 불러와서 웹사이트 화면에 특정한 view를 출력하고 하면
  4번componentDidmount()함수에서 api를 비동기적으로 호출하면된다.
- 이후에 api에서 응답이 돌아오면 상태가 변화되고 리액트에서 상태변화를 감지하고 알아서 view가 갱신됨
  화면에 api응답 결과를 출력해주는 거임
- 비동기적으로 호출이 이루어지면 api 서버에서 응답을 하지 않으면 사용자에게 로딩화면만 출력되도록 설정
- 그래서 progress bar를 api 로딩 메시지 용도로 사용함
  이 메서드가 호출되는 시점에는 화면에 컴포넌트가 나타난 상태입니다.



순서
- component가 처음 실행될 때 그것을 mount라고 표현한다.
- component가 시작되면 우선 context, defaultProps, state를 저장한다.
- 그 후 componentwillmount()메소드를 호출한다.
- 그리고 render()로 component를 DOM에 부착한 후
- Mount가 완료되면 componentDidMount가 호출된다. 컴포넌트가 마운트 됨, 즉 컴포넌트의 첫번째 렌더링이 마치면 호출되는 메서드 입니다.

주의사항
- componentWillmount에서는 props나 state를 바꾸면 안된다.
- mount중이기 때문이다. 그리고 DOM에 render하지 않았기 때문에 DOM에 접근 불가능 하다.

- componentDidmout는 DOM에 접근가능하다. 
- 그래서 여기서 주로 AJAX 요철, setTimeout, setInterval같은 행동을 한다.

------------------------------------------------------------------------------------------------
코드 설명
  progress = () =>{ // 애니메이션으 위한 함수
    const {completed} = this.state; // state 변수를 가지고오고
    this.setState({completed: completed >=100 ? 0 : completed + 1});
    // 프로그래스 함수가 계속 불러와짐으로써 completed 변수가 변경되게끔 해줌
   // 100 이 되면 0으로 바뀌고 그렇지 않으면 +1씩 증가되게 해줌
   }

즉 
progress함수가 호출될 때마다 completed 변수가 0~100 까지 왔다갔다함
------------------------------------------------------------------------------------------------
프로그래스바 코드

              <TableRow>
                <TableCell colSpan="6" align="center">
		//colSpan=6은 위 6개 번호,이미지,이름,새일,성별,직업 6개를 다 나타낸다는 뜻
                  <CircularProgress className={classes.progress} variant="determinate" value=				        {this.state.completed}/>
		// classname에는 progress 함수를 넣음
		// variant로 determinate를 넣음
		// vlaue부분이 실제 애니메이션이 보이는 값을 넣음
                </TableCell>
              </TableRow>
